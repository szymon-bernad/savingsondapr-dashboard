@namespace Dashboard.App.Components

@using BlazorBootstrap
@using System.ComponentModel.DataAnnotations
@using Dashboard.App.Models
@using SavingsOnDapr.Dashboard.Client
@using SavingsOnDapr.Dashboard.Client.Models
@using Currency = Dashboard.App.Models.Currency

<EditForm EditContext="editContext" OnValidSubmit="Submit">

    <div class="row my-3">

        <InputSelect @bind-Value="State.AccountCurrency" @bind-Value:after="async () => await OnAccountCurrencyChanged()">
            DisplayName="Account Currency">
            <option value="">--Select--</option>
            <option value="@(Currency.USD)"> USD </option>
            <option value="@(Currency.EUR)"> EUR </option>
            <option value="@(Currency.GBP)"> GBP </option>
            <option value="@(Currency.CAD)"> CAD </option>
            <option value="@(Currency.PLN)"> PLN </option>
            <option value="@(Currency.NOK)"> NOK </option>
            <option value="@(Currency.CHF)"> CHF </option>
        </InputSelect>

    </div>

    <div class="row my-3">
        <label class="form-label">Account Reference</label>
        <InputSelect @bind-Value="State.Type"
        DisplayName="Account Type">
            <option value="">--Select--</option>
            <option value="@(AccountType.CurrentAccount)"> Current </option>
            <option value="@(AccountType.SavingsAccount)"> Instant Access Savings </option>
        </InputSelect>

    </div>
    <div class="row my-4">
        <label class="form-label">Account Reference</label>
        <TextInput @bind-Value="State.ExternalRef" @bind-Value:after="OnExternalRefChanged" Placeholder="Enter Account Reference" />
    </div>
    <div class="row my-3" hidden="@(State.Type == AccountType.CurrentAccount)">
        <label class="form-label">Current Account Ref</label>
        <InputSelect @bind-Value="State.CurrentAccountRef">
            @foreach (var acc in BankAccounts.Where(ac => ac.AccountType == $"{AccountType.CurrentAccount}" && ac.Currency == $"{State.AccountCurrency}"))
            {
                <option value=@acc.AccountRef>@acc.AccountRef</option>
            }
        </InputSelect>

        <label class="form-label mt-3">Interest Rate</label>
        <label class="form-label fw-bold">@(State.InterestRateString)</label>
    </div>
    <div>
        <ValidationMessage For="() => State.ExternalRef" />
    </div>

    <div class="row my-4">
        <Button Color="ButtonColor.Success" Disabled=@(string.IsNullOrEmpty(State.ExternalRef)) type="ButtonType.Submit">Confirm</Button>
    </div>
</EditForm>




@code {
    [Parameter] public string UserId { get; init; } = default;
    [Parameter] public ICollection<BankAccountDto> BankAccounts { get; init; } = [];
    [Parameter] public EventCallback<AccountCreationDto> OnClickCallback { get; set; }
    [Parameter] public DashbClient DashClient { get; init; }

    private AccountCreationDto? State;

    private EditContext? editContext;

    private TextInput? CurrentAccountRef = default!;

    private ValidationMessageStore? messageStore;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        State = new AccountCreationDto 
        {
            UserId = UserId,
            InterestRate = 0.01m,
            AccountCurrency = Currency.EUR,
        };

        editContext = new(State);
        editContext.OnValidationRequested += HandleValidationRequested;
        messageStore = new(editContext);

        await OnAccountCurrencyChanged(true);
    }

    private void HandleValidationRequested(object? sender,
        ValidationRequestedEventArgs args)
    {
        OnExternalRefChanged();
    }

    private void OnExternalRefChanged()
    {
        messageStore?.Clear();

        // Custom validation logic
        if (BankAccounts.Select(ba => ba.AccountRef).Contains(State.ExternalRef))
        {
            messageStore?.Add(() => State.ExternalRef, "Account reference already exists.");
        }
    }

    private async Task OnAccountCurrencyChanged(bool initRun = false)
    {
        if (State.Type == AccountType.SavingsAccount || initRun)
        {
            var reqBuilder = DashClient.Api.Savings[State.AccountCurrency.ToString()].InterestRate;
            var res = await reqBuilder.GetAsync();
            if (res is not null)
            {
                State.InterestRate = (decimal?)res.InterestRate;
                StateHasChanged();
            }

        }

    }

    private async Task Submit() {
        await OnClickCallback.InvokeAsync(State);
    }


    record CurrencyRateResponse(Models.Currency AccountCurrency, decimal InterestRate, DateTime Timestamp);

}
