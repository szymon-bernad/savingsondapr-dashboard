@namespace Dashboard.App.Components

@using BlazorBootstrap
@using Dashboard.App.Models
@using Microsoft.AspNetCore.Components.Forms
@using SavingsOnDapr.Dashboard.Client.Models
@inject HttpClient Http

<div class="row my-3">
    <InputSelect @bind-Value="State.DebtorAccountRef" @bind-Value:after="OnDebtorChanged"
    DisplayName="Debtor">
        <option value="">--Select--</option>
        @foreach (var acc in BankAccounts.Where(a => a.TotalBalance > 0m))
        {
            <option value=@acc.AccountRef>@acc.AccountRef [@acc.TotalBalance @acc.Currency]</option>
        }
    </InputSelect>
</div>
<div class="row my-3">
    <label class="form-label">Enter Source Amount</label>
    <RangeInput Disabled=@(string.IsNullOrEmpty(State.DebtorAccountRef)) TValue="int" @bind-Value="State.MaxAmountPercentage" @bind-Value:after="OnMaxAmountPercentageChanged" Min=" 1" Max="100" />
    <CurrencyInput Disabled=@(string.IsNullOrEmpty(State.DebtorAccountRef)) HideCurrencySymbol=true TValue="decimal" @bind-Value="State.SourceAmount" @bind-Value:after="OnSourceAmountChanged"/>
</div>

<div class="row mb-3">
    @if (string.IsNullOrEmpty(State.DebtorAccountRef))
    {
        <label class="form-label">Select debtor first</label>
    }
    else
    {
        <InputSelect @ref="BeneficiarySelect" @bind-Value="State.BeneficiaryAccountRef" @bind-Value:after="OnBeneficiaryChanged" DisplayName="Beneficiary">
            @foreach (var acc in BeneficiaryAccounts)
            {
                <option value=@acc.AccountRef>@acc.AccountRef [@acc.Currency]</option>
            }
        </InputSelect>
    }

</div>

<div class="row mb-3">
    <label class="form-label">You'll receive: @(State.TargetAmount == 0m ? "--" : $"{State.TargetAmount}")</label>
</div>
<div class="row mb-3">
    <InputSelect @bind-Value="OrderType" DisplayName="Order Type">
        <option value="">--Select--</option>
        @foreach (var ot in OrderTypes)
        {
            <option value=@ot>@ot</option>
        }
    </InputSelect>
</div>

<div class="row my-4">
    <Button Color="ButtonColor.Success" Disabled=@(State.Order is null) @onclick="ConfirmedAsync">Confirm</Button>
</div>


@code {


    [Parameter] public EventCallback<CurrencyExchangeOrderSummary> OnClickCallback { get; set; }

    [Parameter] public ICollection<BankAccountDto> BankAccounts { get; set; } = Enumerable.Empty<BankAccountDto>().ToList();

    private readonly SemaphoreSlim _ratesSemaphore = new SemaphoreSlim(1, 1);
    
    private readonly ModalState State = new ModalState();

    private InputSelect<string> BeneficiarySelect = default!;

    private ICollection<BankAccountDto> BeneficiaryAccounts { get; set; } = Enumerable.Empty<BankAccountDto>().ToList();

    private ExchangeOrderType OrderType { get; set; } = ExchangeOrderType.MarketRate;

    private readonly ExchangeOrderType[] OrderTypes = Enum.GetValues(typeof(ExchangeOrderType)).Cast<ExchangeOrderType>().ToArray();

    private Timer? RateRefreshTimer = default;

    protected void OnDebtorChanged()
    {
        State.SourceAmount = 0m;
        State.TargetAmount = 0m;
        if (State.DebtorAccountRef is not null)
        {
            State.DebtorAccount = BankAccounts.FirstOrDefault(x => x.AccountRef == State.DebtorAccountRef);
            if (State.DebtorAccount is not null)
            {
                State.MaxAmount = State.DebtorAccount.TotalBalance;
                BeneficiaryAccounts = BankAccounts.Where(x => x.AccountRef != State.DebtorAccountRef).ToList();
                State.BeneficiaryAccountRef = BeneficiaryAccounts.FirstOrDefault()?.AccountRef;
                State.BeneficiaryAccount = BankAccounts.FirstOrDefault(x => x.AccountRef == State.BeneficiaryAccountRef);
            }
            else 
            {
                State.DebtorAccountRef = null;
            }
        }
        StateHasChanged();
    }

    protected void OnBeneficiaryChanged()
    {
        State.TargetAmount = 0m;
        State.BeneficiaryAccount = BankAccounts.FirstOrDefault(x => x.AccountRef == State.BeneficiaryAccountRef);

        StateHasChanged();
    }

    protected async Task OnSourceAmountChanged()
    {
        State.TargetAmount = 0m;
        if (State.SourceAmount > 0 &&
            State.DebtorAccount is not null &&
            State.BeneficiaryAccount is not null &&
            State.DebtorAccountRef is not null &&
            State.BeneficiaryAccountRef is not null)
        {
            State.Order = new CurrencyExchangeOrderSummary(State.DebtorAccountRef, State.BeneficiaryAccountRef, State.SourceAmount);
            CalculateTargetAmount(State.DebtorAccount!.Currency, State.BeneficiaryAccount!.Currency);
        }
        else
        {
            State.Order = null;
        }

        StateHasChanged();

        if (State.SourceAmount > 0)
        {
            await OnRatesRequestedAsync();
        }
    }

    protected async Task OnMaxAmountPercentageChanged()
    {
        if (State.MaxAmountPercentage > 0)
        {
            State.SourceAmount = Math.Round(State.MaxAmount * State.MaxAmountPercentage / 100, 2, MidpointRounding.AwayFromZero);
            await OnSourceAmountChanged();
        }
    }

    protected async Task OnRatesRequestedAsync()
    {
        if (State.IsRatesFetchingScheduled)
        {
            return;
        }

        await _ratesSemaphore.WaitAsync();
        if (!State.IsRatesFetchingScheduled)
        {
            State.IsRatesFetchingScheduled = true;
            if (State.ExchangeResponse is null || State.ExchangeResponse.Timestamp < DateTime.UtcNow.AddSeconds(-5))
            {
                RateRefreshTimer = new Timer(async _ => await FetchRatesAsync(), null, 0, Timeout.Infinite);
            }
            else
            {
                var dt = (DateTime.UtcNow - State.ExchangeResponse.Timestamp.ToUniversalTime());
                Console.WriteLine($"Rates Query scheduled in {5000 - (int)dt.TotalMilliseconds} ms...");

                if (RateRefreshTimer is null)
                {
                    RateRefreshTimer = new Timer(async _ => await FetchRatesAsync(), null, 5000 - (int)dt.TotalMilliseconds, Timeout.Infinite);
                }
                else
                {
                    RateRefreshTimer.Change(5000 - (int)dt.TotalMilliseconds, Timeout.Infinite);
                }
            }
        }
        _ratesSemaphore.Release();
    }

    protected async Task FetchRatesAsync()
    {
        if (State.DebtorAccount is not null && State.BeneficiaryAccount is not null && State.SourceAmount > 0m)
        {
            Console.WriteLine($"Rates Query sent for SourceAmount = {State.SourceAmount}");
            var res = await Http.PostAsJsonAsync<ExchangeRateQuery>(
                        $"/api/currency/exchange-query",
                        new ExchangeRateQuery(State.DebtorAccount!.Currency, State.BeneficiaryAccount!.Currency, State.SourceAmount));

            if (res.IsSuccessStatusCode)
            {
                State.ExchangeResponse = await res.Content.ReadFromJsonAsync<CurrencyExchangeResponse>();

                if (State.ExchangeResponse is not null)
                {
                    State.ExchangeResponse = State.ExchangeResponse with { Timestamp = DateTime.UtcNow };

                    CalculateTargetAmount(State.DebtorAccount!.Currency, State.BeneficiaryAccount!.Currency);
                    StateHasChanged();
                }
            }
        }

        await _ratesSemaphore.WaitAsync();
        State.IsRatesFetchingScheduled = false;
        _ratesSemaphore.Release();
    }

    protected async Task ConfirmedAsync(EventArgs e)
    {
        await OnClickCallback.InvokeAsync(State.Order);
    }

    protected void CalculateTargetAmount(string sourceCurrency, string targetCurrency)
    {
        if (State.ExchangeResponse is not null && 
            State.ExchangeResponse.ExchangeType.StartsWith(sourceCurrency) &&
            State.ExchangeResponse.ExchangeType.EndsWith(targetCurrency))
        {
            State.TargetAmount = Math.Round(State.SourceAmount * State.ExchangeResponse.Rate, 2, MidpointRounding.ToEven);
        }
    }

    public class ModalState
    {
        public string? DebtorAccountRef { get; set; } = default;
        public string? BeneficiaryAccountRef { get; set; } = default;
        public BankAccountDto? DebtorAccount { get; set; } = default;
        public BankAccountDto? BeneficiaryAccount { get; set; } = default;
        public decimal SourceAmount { get; set; } = default;
        public decimal TargetAmount { get; set; } = default;

        public bool IsRatesFetchingScheduled { get; set; } = false;

        public CurrencyExchangeOrderSummary? Order { get; set; }
        public CurrencyExchangeResponse? ExchangeResponse { get; set; } = default;

        public decimal MaxAmount { get; set; } = default;
        public int MaxAmountPercentage { get; set; } = default;

    }
}