@page "/currency-exchanges"
@using Microsoft.AspNetCore.Authorization
@inject HttpClient Http
@attribute [Authorize]
@inject AuthenticationStateProvider AuthenticationStateProvider
@using BlazorBootstrap;

<PageTitle>Currency Exchanges</PageTitle>

<p>Welcome to Currency Exchanges Dashboard!</p>

@if (!ExchangeTypes.Any())
{
    <p><em >@LoadingMessage</em></p>
}
else
{
    <AuthorizeView Roles="Advanced">
        <div class="container-fluid">
            <div class="row mb-3">
                <div class="col-3">
                    <InputSelect class="bg-dark" style="width: 100%; color: #efe" @bind-Value="Model.ExchangeType"
                    @bind-Value:after="OnQueryChangedAsync"
                    DisplayName="Exchange Types">
                        <option>--Select--</option>
                        @foreach (var exch in ExchangeTypes)
                        {
                            <option value=@exch.Key>@exch.Key</option>
                        }
                    </InputSelect>
                </div>
                <div class="col-3">
                    <InputSelect class="bg-dark" style="width: 100%; color: #efe" @bind-Value="Model.ValueType"
                    @bind-Value:after="OnQueryChangedAsync"
                    DisplayName="Values">
                        <option>--Select--</option>
                        @foreach (var vt in ValueTypes)
                        {
                            <option value=@vt>@vt</option>
                        }
                    </InputSelect>
                </div>
                <div class="col-3">
                    <label for="FilterDate" class="form-label">From Date:</label>
                    <InputDate @bind-Value="Model.FilterDate"  class="bg-dark" style="color: #efe" @bind-Value:after="OnQueryChangedAsync" Placeholder="Select Date" />

                </div>
                <div class="col-3">
                    <label for="FilterDate" class="form-label">To Date (optional):</label>
                    <InputDate @bind-Value="Model.FilterDateEnd" class="bg-dark" style="color: #efe" @bind-Value:after="OnQueryChangedAsync" Placeholder="Select Date" />
                </div>
                <div class="col-3">
                    <span />
                </div>
            </div>
            <div class="container-fluid" style="display: flex; flex-direction: column; align-items: center; justify-content: center; height: 100vh;">
                <BarChart @ref="BarChart" hidden="@(Model.IsLoading ? "hidden" : null)" Width="920" WidthUnit=@Unit.Px Height="720" HeightUnit=@Unit.Px style="display: inline-block; margin: 0 auto" />
                <Spinner Type="SpinnerType.Dots" Color="SpinnerColor.Success" Size="SpinnerSize.Large" Visible="@Model.IsLoading" style="position: absolute; margin: 0 auto" />
            </div>

        </div>
    </AuthorizeView>
}

@code {
    [SupplyParameterFromForm]
    private Dashboard? Model { get; set; }


    private ICollection<KeyValuePair<string, Tuple<string, string>>> ExchangeTypes = [
        new KeyValuePair<string, Tuple<string, string>>("EUR => USD", new Tuple<string, string>("EUR", "USD")),
    new KeyValuePair<string, Tuple<string, string>>("USD => EUR", new Tuple<string, string>("USD", "EUR")),
    new KeyValuePair<string, Tuple<string, string>>("USD => GBP", new Tuple<string, string>("USD", "GBP")),
    new KeyValuePair<string, Tuple<string, string>>("USD => PLN", new Tuple<string, string>("USD", "PLN")),
    new KeyValuePair<string, Tuple<string, string>>("EUR => GBP", new Tuple<string, string>("EUR", "GBP")),
    new KeyValuePair<string, Tuple<string, string>>("EUR => PLN", new Tuple<string, string>("EUR", "PLN")),
    ];

    private string[] ValueTypes = ["TotalExchangesCount", "TotalSourceAmount", "TotalTargetAmount"];


    private string LoadingMessage = "Loading...";

    private const string BackEndBaseUrl = "http://localhost:5170/api";

    private readonly HttpClient _httpClient = new HttpClient();

    private readonly Random _random = new Random();

    private BarChart BarChart = default!;
    private BarChartOptions _barChartOptions = new BarChartOptions { Responsive = true, Interaction = new Interaction { Mode = InteractionMode.Index } };
    private ChartData _chartData = default!;
    private bool _unchartedTerritory = true;

    private Timer? RateRefreshTimer = default;

    protected override Task OnInitializedAsync()
    {
        Model = new();
        return Task.CompletedTask;
    }

    protected async Task OnQueryChangedAsync()
    {
        if (Model?.ExchangeType is not null)
        {
            var exchTypeValue = ExchangeTypes.FirstOrDefault(x => x.Key == Model.ExchangeType).Value;
            var urlPath = $"{BackEndBaseUrl}/currency-exchange-summary/{exchTypeValue.Item1}/{exchTypeValue.Item2}/{Model.FilterDate:yyyy-MM-dd}";

            if (Model.FilterDateEnd.HasValue && Model.FilterDateEnd.Value > Model.FilterDate)
            {
                urlPath += $"?toDate={Model.FilterDateEnd:yyyy-MM-dd}";
            }
            Model.IsLoading = true;

            await FetchDataAsync(urlPath);
        }
    }

    protected async Task FetchDataAsync(string dataUrl)
    {
        if (!string.IsNullOrEmpty(dataUrl) && !dataUrl.Equals(Model.CurrentDataUrl,StringComparison.OrdinalIgnoreCase))
        {
            Model.CurrentDataUrl = dataUrl;
            Model.Data = null;
            var response = await _httpClient.GetAsync(dataUrl);

            if (response.StatusCode == System.Net.HttpStatusCode.Accepted)
            {
                RateRefreshTimer = new Timer(async _ => await FetchDataAsync(dataUrl), null, 5000, Timeout.Infinite);
                Model.Data = null;

            }
            else if (response.IsSuccessStatusCode)
            {
                var data = await response.Content.ReadFromJsonAsync<CurrencyExchangeSummaryResponse>();
                if (data is not null)
                {
                    Model.Data = data;
                }
            }
            
            if(response.IsSuccessStatusCode || Model.Data is null)
            {
                Model.CurrentDataUrl = string.Empty;
            }
        }

        if (Model.Data is not null && Model.Data.ColumnValues.Any())
        {
            Model.IsLoading = false;
            var dateIndex = Array.IndexOf(Model.Data.ColumnNames, "Date");
            var totalCountIndex = Array.IndexOf(Model.Data.ColumnNames, Model.ValueType ?? ValueTypes[0]);
            var columnValues = Model.Data.ColumnValues.Values;
            var labels = columnValues.Select(e => e[dateIndex]).ToList();
            _chartData = new ChartData
                {
                    Labels = labels,
                    Datasets =
                    [new BarChartDataset()
                        {
                            Label = Model.ExchangeType,
                            Data = columnValues.Select(
                                        e => {
                                                if (Model.ValueType == ValueTypes[1] || Model.ValueType == ValueTypes[2])
                                                {
                                                    Decimal.TryParse(e[totalCountIndex], out var v);
                                                    return (double?)v;
                                                }
                                                else
                                                {
                                                    Int32.TryParse(e[totalCountIndex], out var v);
                                                    return (double?)v;
                                                }
                                            })
                                    .ToList(),
                            BackgroundColor = new List<string> { "#51a88b" },
                            BorderColor = new List<string> { "#333" },
                            BorderWidth = new List<double> { 1.0 },
                    }]
                };

            if (_unchartedTerritory)
            {
                await BarChart.InitializeAsync(_chartData, _barChartOptions);
                _unchartedTerritory = false;
            }
            else
            {
                await BarChart.UpdateValuesAsync(_chartData);
            }
        }
        StateHasChanged();
    }

    // =================================================================================================

    public class Dashboard
    {
        public string? ExchangeType { get; set; }

        public string? ValueType { get; set; }

        public DateOnly FilterDate { get; set; } = new DateOnly(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day);

        public DateOnly? FilterDateEnd { get; set; } = default;

        public CurrencyExchangeSummaryResponse? Data { get; set; } = default;

        public string CurrentDataUrl { get; set; } = string.Empty;

        public bool IsLoading { get; set; } = false;

    }

    public record CurrencyExchangeSummaryResponse
    {
        public string ResponseKey { get; init; } = string.Empty;

        public string[] ColumnNames { get; init; } = [];

        public IDictionary<string, string[]>? ColumnValues { get; init; }
    }
}
