@page "/accounts"
@using Microsoft.AspNetCore.Authorization
@inject HttpClient Http
@attribute [Authorize]
@inject AuthenticationStateProvider AuthenticationStateProvider
@using BlazorBootstrap;
@using System.Security.Claims
@using System.Collections.Generic
@using Microsoft.Kiota.Abstractions.Authentication
@using Microsoft.Kiota.Http.HttpClientLibrary
@using SavingsOnDapr.Dashboard.Client
@using ApiModels = SavingsOnDapr.Dashboard.Client.Models
@using global::Dashboard.App.Models
@using global::Dashboard.App.Components

<PageTitle>Accounts</PageTitle>
<Modal @ref="modal"/>

<AuthorizeView>
    <div class="container-fluid my-2">
        <Button Color="ButtonColor.Success" @onclick="ShowNewAccountModal">New Bank Account...</Button>
        <Button Color="ButtonColor.Primary" @onclick="ShowNewExchangeModal">New Currency Exchange...</Button>
        <Button Color="ButtonColor.Info" @onclick="FetchAccountsAsync">Refresh</Button>
    </div>
    @if (!string.IsNullOrEmpty(SuccessMessage))
    {
        <div class="alert alert-success my-3" role="alert">
            @SuccessMessage
        </div>
    }

    <div class="container-fluid">
        @foreach (var acc in BankAccounts)
        {
            <BankAccountCard AccountDto="acc" />
        }
    </div>
</AuthorizeView>

@code {

    private Modal modal = default!;

    private IList<BankAccountDto> BankAccounts { get; set; } = Enumerable.Empty<BankAccountDto>().ToList();
    private string UserId { get; set; } = string.Empty;
    private string? SuccessMessage = default;
    private DashbClient _dashClient;



    protected override async Task OnInitializedAsync()
    {
        _dashClient = new DashbClient(
            new HttpClientRequestAdapter(
                authenticationProvider: new AnonymousAuthenticationProvider(),
                httpClient: Http));

        var authState = await AuthenticationStateProvider
                .GetAuthenticationStateAsync();

        if (authState.User.Identity?.IsAuthenticated ?? false)
        {
            UserId = (authState.User?.Identity as ClaimsIdentity)?.Claims?.FirstOrDefault(x => x.Type == "oid")?.Value ?? string.Empty;
            try
            {
                await FetchAccountsAsync();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Failed to fetch account for UserId=[{UserId}]: {ex.Message}");
            }
        }
    }

    private async Task ShowNewAccountModal()
    {
        var parameters = new Dictionary<string, object>();
        parameters.Add("UserId", UserId);
        parameters.Add("AccountRefs", BankAccounts.Select(x => x.AccountRef).ToArray());
        parameters.Add("OnClickCallback", EventCallback.Factory.Create<CurrentAccountDto>(this, NewAccountConfirmedAsync));
        await modal.ShowAsync<AddNewAccount>(title: "New Bank Account", parameters: parameters);
    }

    private async Task ShowNewExchangeModal()
    {
        var parameters = new Dictionary<string, object>();
        parameters.Add("BankAccounts", BankAccounts);
        parameters.Add("OnClickCallback", EventCallback.Factory.Create<CurrencyExchangeOrderSummary>(this, ModalConfirmedAsync));
        await modal.ShowAsync<CurrencyExchangeNew>(title: "New Exchange Details", parameters: parameters);
    }

    private async Task NewAccountConfirmedAsync(CurrentAccountDto newAccount)
    {
        await modal.HideAsync();

        var reqBuilder = _dashClient.Api.Users[UserId].AddCurrentAccount;
        var res = await reqBuilder.PostAsync(new ApiModels.CreateCurrentAccount
        {
            ExternalRef = newAccount.ExternalRef,
            AccountCurrency = newAccount.AccountCurrency switch
            {
                Models.Currency.GBP => ApiModels.Currency.GBP,
                Models.Currency.EUR => ApiModels.Currency.EUR,
                Models.Currency.USD => ApiModels.Currency.USD,
                Models.Currency.CAD => ApiModels.Currency.CAD,
                Models.Currency.PLN => ApiModels.Currency.PLN,
                Models.Currency.NOK => ApiModels.Currency.NOK,
                Models.Currency.CHF => ApiModels.Currency.CHF,
                _ => ApiModels.Currency.USD
            },
            UserId = UserId,
        });

        SuccessMessage = "Account creation has been scheduled!";
        StateHasChanged();
    }

    private async Task ModalConfirmedAsync(CurrencyExchangeOrderSummary order)
    {
        Console.WriteLine($"Order: {order.DebtorAccountRef} => {order.BeneficiaryAccountRef} : {order.SourceAmount}");
        await modal.HideAsync();

        var debtorAcc = BankAccounts.FirstOrDefault(x => x.AccountRef == order.DebtorAccountRef);
        var beneficiaryAcc = BankAccounts.FirstOrDefault(x => x.AccountRef == order.BeneficiaryAccountRef);

        if (debtorAcc is not null && beneficiaryAcc is not null)
        {
            var exchangeRequest = new CurrencyExchangeRequest(
                $"{UserId}-{DateTime.UtcNow:s}",
                debtorAcc.AccountRef,
                beneficiaryAcc.AccountRef,
                $"{debtorAcc.Currency}",
                $"{beneficiaryAcc.Currency}",
                order.SourceAmount);

            var res = await Http.PostAsJsonAsync<CurrencyExchangeRequest>($"/api/currency/exchange-order", exchangeRequest);
            if (res.IsSuccessStatusCode)
            {
                SuccessMessage = "Exchange order has been placed successfully!";
                StateHasChanged();
            }
        }
    }

    private async Task FetchAccountsAsync()
    {
        if (!string.IsNullOrWhiteSpace(UserId))
        {
            BankAccounts.Clear();

            var accounts = (await Http.GetFromJsonAsync<ICollection<BankAccountDto>>($"/api/users/{UserId}/accounts"))
                            ?? [];
            foreach (var acc in accounts)
            {
                BankAccounts.Add(acc);
            }

            if (BankAccounts.Count > 0)
            {
                StateHasChanged();
            }
        }
    }
}
