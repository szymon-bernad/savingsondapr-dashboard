@page "/accounts"
@using Dashboard.App.Models
@using Microsoft.AspNetCore.Authorization
@inject HttpClient Http
@attribute [Authorize]
@inject AuthenticationStateProvider AuthenticationStateProvider
@using BlazorBootstrap;
@using System.Security.Claims
@using Dashboard.App.Components
@using System.Collections.Generic

<PageTitle>Accounts</PageTitle>
<Modal @ref="modal"/>

<AuthorizeView>
 <div class="container-fluid my-2">
        <Button Color="ButtonColor.Primary" @onclick="ShowNewExchangeModal">New Currency Exchange...</Button>
 </div>
 @if(!string.IsNullOrEmpty(SuccessMessage))
{
    <div class="alert alert-success my-3" role="alert">
        @SuccessMessage
    </div>
}

<div class="container-fluid">

    @foreach (var acc in BankAccounts)
        {
            <div class="row mb-3">
                <BankAccountCard AccountDto="acc" />
            </div>
        }
    </div>
</AuthorizeView>

@code {

    private Modal modal = default!;

    private IList<BankAccountDto> BankAccounts { get; set; } = Enumerable.Empty<BankAccountDto>().ToList();
    private string UserId { get; set; } = string.Empty;
    private string? SuccessMessage = default;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider
                .GetAuthenticationStateAsync();

        if (authState.User.Identity?.IsAuthenticated ?? false)
        {
            UserId = (authState.User?.Identity as ClaimsIdentity)?.Claims?.FirstOrDefault(x => x.Type == "oid")?.Value ?? string.Empty;
            try
            {
                if (!string.IsNullOrWhiteSpace(UserId))
                {
                    var accounts = (await Http.GetFromJsonAsync<ICollection<BankAccountDto>>($"/api/users/{UserId}/accounts"))
                                    ?? [];
                    foreach (var acc in accounts)
                    {
                        BankAccounts.Add(acc);
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Failed to fetch account for UserId=[{UserId}]: {ex.Message}");
            }
        }
    }

    private async Task ShowNewExchangeModal()
    {
        var parameters = new Dictionary<string, object>();
        parameters.Add("BankAccounts", BankAccounts);
        parameters.Add("OnClickCallback", EventCallback.Factory.Create<CurrencyExchangeOrderSummary>(this, ModalConfirmedAsync));
        await modal.ShowAsync<CurrencyExchangeNew>(title: "New Exchange Details", parameters: parameters);
    }

    private async Task ModalConfirmedAsync(CurrencyExchangeOrderSummary order)
    {
        Console.WriteLine($"Order: {order.DebtorAccountRef} => {order.BeneficiaryAccountRef} : {order.SourceAmount}");
        await modal.HideAsync();

        var debtorAcc = BankAccounts.FirstOrDefault(x => x.AccountRef == order.DebtorAccountRef);
        var beneficiaryAcc = BankAccounts.FirstOrDefault(x => x.AccountRef == order.BeneficiaryAccountRef);

        if (debtorAcc is not null && beneficiaryAcc is not null)
        {
            var exchangeRequest = new CurrencyExchangeRequest(
                $"{UserId}-{DateTime.UtcNow:s}",
                debtorAcc.AccountRef,
                beneficiaryAcc.AccountRef,
                $"{debtorAcc.Currency}",
                $"{beneficiaryAcc.Currency}",
                order.SourceAmount);

            var res = await Http.PostAsJsonAsync<CurrencyExchangeRequest>($"/api/currency/exchange-order", exchangeRequest);
            if (res.IsSuccessStatusCode)
            {
                SuccessMessage = "Exchange order has been placed successfully!";
                StateHasChanged();
            }
        }
    }
}
